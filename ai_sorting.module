<?php

/**
 * @file
 * Primary module file for AI Sorting.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\Sql;

/**
 * Implements hook_help().
 */
function ai_sorting_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ai_sorting':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The AI Sorting module provides an intelligent sorting mechanism for Drupal Views using the UCB1 algorithm.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ai_sorting_views_pre_render(ViewExecutable $view) {
  // Check if the view uses the 'ai_sorting' sort plugin.
  $sorts = $view->display_handler->getOption('sorts');
  if (!isset($sorts['ai_sorting'])) {
    return;
  }

  // Proceed with AI sorting logic.
  $nids = [];
  $nid_url_map = [];
  foreach ($view->result as $row) {
    if (isset($row->nid)) {
      $nids[] = $row->nid;
      $nid_url_map[$row->nid] = Url::fromRoute('entity.node.canonical', ['node' => $row->nid])->toString();
    }
  }

  if (!empty($nids)) {
    $view->element['#attached']['library'][] = 'ai_sorting/ai_sorting_increment';
    $view->element['#attached']['drupalSettings']['aiSorting']['views'][$view->id()] = [
      'nids' => $nids,
      'nidUrlMap' => $nid_url_map,
      'incrementTrialsUrl' => Url::fromRoute('ai_sorting.increment_trials')->toString(),
    ];

    // Retrieve the tracking method from the sorts structure.
    if (isset($sorts['ai_sorting']['tracking_method'])) {
      $tracking_method = $sorts['ai_sorting']['tracking_method'];
    } else {
      $tracking_method = NULL;
    }

    if ($tracking_method === 'custom') {
      $view->element['#attached']['library'][] = 'ai_sorting/ai_sorting_click_tracking';
      $view->element['#attached']['drupalSettings']['aiSorting']['views'][$view->id()]['clickTrackingUrl'] = Url::fromRoute('ai_sorting.track_click')->toString();
      $view->element['#attached']['drupalSettings']['aiSorting']['views'][$view->id()]['displayId'] = $view->current_display;
    }
  }

  // Utilize the TotalTrialsService to calculate and update total trials.
  /** @var \Drupal\ai_sorting\Service\TotalTrialsService $total_trials_service */
  $total_trials_service = \Drupal::service('ai_sorting.total_trials_service');
  $total_trials = $total_trials_service->calculateAndUpdateTotalTrials($view);
}

/**
 * Implements hook_page_attachments().
 */
function ai_sorting_page_attachments(array &$attachments) {
  $attachments['#attached']['drupalSettings']['aiSorting']['csrfToken'] = \Drupal::csrfToken()->get('ai_sorting_increment_trials');
}

/**
 * Implements hook_views_data_alter().
 */
function ai_sorting_views_data_alter(array &$data) {
  $data['node']['ai_sorting'] = [
    'title' => t('AI Sorting'),
    'help' => t('Sort content using AI-based algorithm.'),
    'sort' => [
      'id' => 'ai_sorting',
    ],
  ];
}