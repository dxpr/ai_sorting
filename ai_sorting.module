<?php

/**
 * @file
 * Primary module file for AI Sorting.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\Sql;

/**
 * Implements hook_help().
 */
function ai_sorting_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ai_sorting':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The AI Sorting module provides an intelligent sorting mechanism for Drupal Views using the UCB2 algorithm.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ai_sorting_views_pre_render(ViewExecutable $view) {
  // Check if the view query is an instance of Sql.
  if (!($view->query instanceof Sql)) {
    return;
  }

  // Check if the query contains 'node_ucb1_score'.
  $query_string = $view->build_info['query']->__toString();
  if (strpos($query_string, 'node_ucb1_score') === FALSE) {
    return;
  }

  // Proceed with AI sorting logic.
  if (!empty($view->style_plugin) && $view->style_plugin->usesFields()) {
    $nids = [];
    foreach ($view->result as $row) {
      if (isset($row->nid)) {
        $nids[] = $row->nid;
      }
    }
    
    if (!empty($nids)) {
      $view->element['#attached']['library'][] = 'ai_sorting/ai_sorting';
      $view->element['#attached']['drupalSettings']['aiSorting']['views'][$view->id()] = [
        'nids' => $nids,
        'incrementTrialsUrl' => Url::fromRoute('ai_sorting.increment_trials')->toString(),
      ];
    }

    // Log the original query.
    \Drupal::logger('ai_sorting')->notice('Q: @query', ['@query' => $query_string]);

    // Execute the original query and log the results.
    try {
      $original_result = $view->build_info['query']->execute();
      $original_data = $original_result->fetchAll(\PDO::FETCH_ASSOC);
      $result_string = print_r($original_data, TRUE);
      \Drupal::logger('ai_sorting')->notice('O: @results', ['@results' => $result_string]);
    }
    catch (\Exception $e) {
      \Drupal::logger('ai_sorting')->error('Error executing Original Query: @error', ['@error' => $e->getMessage()]);
    }

    // Utilize the TotalTrialsService to calculate and update total trials.
    /** @var \Drupal\ai_sorting\Service\TotalTrialsService $total_trials_service */
    $total_trials_service = \Drupal::service('ai_sorting.total_trials_service');
    $total_trials = $total_trials_service->calculateAndUpdateTotalTrials($view);

    \Drupal::logger('ai_sorting')->notice('Total Trials for view @view_id and display @display_id: @total', [
      '@view_id' => $view->id(),
      '@display_id' => $view->current_display,
      '@total' => $total_trials,
    ]);
  }
}

/**
 * Implements hook_page_attachments().
 */
function ai_sorting_page_attachments(array &$attachments) {
  $attachments['#attached']['drupalSettings']['aiSorting']['csrfToken'] = \Drupal::csrfToken()->get('ai_sorting_increment_trials');
}

/**
 * Implements hook_views_data_alter().
 */
function ai_sorting_views_data_alter(array &$data) {
  $data['node']['ai_sorting'] = [
    'title' => t('AI Sorting'),
    'help' => t('Sort content using AI-based algorithm.'),
    'sort' => [
      'id' => 'ai_sorting',
    ],
  ];
}